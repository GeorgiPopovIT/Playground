// This file was auto-generated by ML.NET Model Builder.
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Microsoft.ML.Data;
using Microsoft.ML.Trainers.FastTree;
using Microsoft.ML.Trainers;
using Microsoft.ML;

namespace FootballMatches_Predictor
{
    public partial class FootballResultModel
    {
        /// <summary>
        /// Retrains model using the pipeline generated as part of the training process. For more information on how to load data, see aka.ms/loaddata.
        /// </summary>
        /// <param name="mlContext"></param>
        /// <param name="trainData"></param>
        /// <returns></returns>
        public static ITransformer RetrainPipeline(MLContext mlContext, IDataView trainData)
        {
            var pipeline = BuildPipeline(mlContext);
            var model = pipeline.Fit(trainData);

            return model;
        }

        /// <summary>
        /// build the pipeline that is used from model builder. Use this function to retrain model.
        /// </summary>
        /// <param name="mlContext"></param>
        /// <returns></returns>
        public static IEstimator<ITransformer> BuildPipeline(MLContext mlContext)
        {
            // Data process configuration with pipeline data transformations
            var pipeline = mlContext.Transforms.ReplaceMissingValues(new []{new InputOutputColumnPair(@"Match Number", @"Match Number"),new InputOutputColumnPair(@"Round Number", @"Round Number"),new InputOutputColumnPair(@"AG", @"AG")})      
                                    .Append(mlContext.Transforms.Text.FeaturizeText(inputColumnName:@"Date",outputColumnName:@"Date"))      
                                    .Append(mlContext.Transforms.Text.FeaturizeText(inputColumnName:@"Location",outputColumnName:@"Location"))      
                                    .Append(mlContext.Transforms.Text.FeaturizeText(inputColumnName:@"Home Team",outputColumnName:@"Home Team"))      
                                    .Append(mlContext.Transforms.Text.FeaturizeText(inputColumnName:@"Away Team",outputColumnName:@"Away Team"))      
                                    .Append(mlContext.Transforms.Text.FeaturizeText(inputColumnName:@"Result",outputColumnName:@"Result"))      
                                    .Append(mlContext.Transforms.Concatenate(@"Features", new []{@"Match Number",@"Round Number",@"AG",@"Date",@"Location",@"Home Team",@"Away Team",@"Result"}))      
                                    .Append(mlContext.Transforms.Conversion.MapValueToKey(outputColumnName:@"HG",inputColumnName:@"HG"))      
                                    .Append(mlContext.MulticlassClassification.Trainers.OneVersusAll(binaryEstimator:mlContext.BinaryClassification.Trainers.FastTree(new FastTreeBinaryTrainer.Options(){NumberOfLeaves=4,MinimumExampleCountPerLeaf=20,NumberOfTrees=4,MaximumBinCountPerFeature=254,FeatureFraction=1,LearningRate=0.1,LabelColumnName=@"HG",FeatureColumnName=@"Features"}),labelColumnName: @"HG"))      
                                    .Append(mlContext.Transforms.Conversion.MapKeyToValue(outputColumnName:@"PredictedLabel",inputColumnName:@"PredictedLabel"));

            return pipeline;
        }
    }
}
